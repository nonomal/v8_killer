# We have built-in default values for identifiers, but if you manually specify identifiers,
# we will not use the default values. So please ensure that you have **defined complete identifiers**.
[identifiers]
# There are two types of identifier:
# One is `symbol`, which automatically looks up the target function based on the symbol table;
# The other is `rva`, which directly specifies the function's RVA.
# Below, I provide their respective syntax.

# The type of identifiers is an array, and we will match functions based on the order in the array.

#V8_SCRIPT_COMPILER_COMPILE_FUNCTION = [{ type = "symbol", symbols = [
#    """_ZN2v814ScriptCompiler23CompileFunctionInternalENS_5LocalINS_\
#    7ContextEEEPNS0_6SourceEmPNS1_INS_6StringEEEmPNS1_INS_6ObjectEEE\
#    NS0_14CompileOptionsENS0_13NoCacheReasonEPNS1_INS_14ScriptOrModu\
#    leEEE""",
#    """?CompileFunctionInternal@ScriptCompiler@v8@@CA?AV?$MaybeLocal\
#    @VFunction@v8@@@2@V?$Local@VContext@v8@@@2@PEAVSource@12@_KQEAV?\
#    $Local@VString@v8@@@2@2QEAV?$Local@VObject@v8@@@2@W4CompileOptio\
#    ns@12@W4NoCacheReason@12@PEAV?$Local@VScriptOrModule@v8@@@2@@Z"""] }]
V8_SCRIPT_COMPILER_COMPILE_FUNCTION = [{ type = "rva", module_name = "node", rva = 0x00a3ffb0 }]
V8_STRING_UTF8LENGTH = [{ type = "symbol", symbols = [
    """_ZNK2v86String10Utf8LengthEPNS_7IsolateE""",
    """?Utf8Length@String@v8@@QEBAHPEAVIsolate@2@@Z"""] }]
V8_STRING_WRITE_UTF8 = [{ type = "symbol", symbols = [
    """_ZNK2v86String9WriteUtf8EPNS_7IsolateEPciPii""",
    """?WriteUtf8@String@v8@@QEBAHPEAVIsolate@2@PEADHPEAHH@Z"""] }]
V8_CONTEXT_GET_ISOLATE = [{ type = "symbol", symbols = [
    """_ZN2v87Context10GetIsolateEv""",
    """?GetIsolate@Context@v8@@QEAAPEAVIsolate@2@XZ"""] }]
V8_STRING_NEW_FROM_UTF8 = [{ type = "symbol", symbols = [
    """_ZN2v86String11NewFromUtf8EPNS_7IsolateEPKcNS_13NewStringTypeEi""",
    """?NewFromUtf8@String@v8@@SA?AV?$MaybeLocal@VString@v8@@@2@PEAV\
    Isolate@2@PEBDW4NewStringType@2@H@Z"""] }]


[rules.hook_console_log]
matcher = { type = "resource-name-keyword", keyword = "hello_world.js" }

processors = [
    { type = "insert-before", content = """\
    const originalConsoleLog = console.log
    console.log = function () {
      originalConsoleLog('now you see :)')
      return originalConsoleLog.apply(this, arguments)
    }""" },
    { type = "insert-after", content = """\
    console.log = originalConsoleLog
    """ }
]
